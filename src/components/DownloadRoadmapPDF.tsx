import React, { useCallback, useState } from "react";
import jsPDF from "jspdf";
import { Button } from "@/components/ui/button";
import { Download } from "lucide-react";

export interface RoadmapResource {
  title: string;
  url: string;
}

interface DownloadRoadmapPDFProps {
  careerName: string;
  roadmap: string[];
  missingSkills?: string[];
  resources?: RoadmapResource[];
  className?: string;
}

const loadImageAsDataUrl = async (src: string): Promise<string | null> => {
  try {
    const response = await fetch(src);
    const blob = await response.blob();
    return await new Promise((resolve) => {
      const reader = new FileReader();
      reader.onloadend = () => resolve(reader.result as string);
      reader.readAsDataURL(blob);
    });
  } catch {
    return null;
  }
};

const DownloadRoadmapPDF: React.FC<DownloadRoadmapPDFProps> = ({
  careerName,
  roadmap,
  missingSkills = [],
  resources = [],
  className
}) => {
  const [isGenerating, setIsGenerating] = useState(false);

  const generatePDF = useCallback(async () => {
    if (!careerName || !roadmap || roadmap.length === 0) return;
    setIsGenerating(true);
    try {
      const doc = new jsPDF({ orientation: "portrait", unit: "mm", format: "a4" });
      const pageWidth = doc.internal.pageSize.getWidth();
      const pageHeight = doc.internal.pageSize.getHeight();
      const margin = 15;
      const contentWidth = pageWidth - margin * 2;

      // Branding logo (centered)
      // Try relative path first (works under base paths), then absolute root
      const logoDataUrl =
        (await loadImageAsDataUrl("lovable-uploads/b59b9ebf-45c8-4202-854a-64d32ac843ae.png")) ||
        (await loadImageAsDataUrl("/lovable-uploads/b59b9ebf-45c8-4202-854a-64d32ac843ae.png")) ||
        (await loadImageAsDataUrl("favicon.ico")) ||
        (await loadImageAsDataUrl("/favicon.ico"));
      let y = margin;
      if (logoDataUrl) {
        try {
          const imgWidth = 28;
          const imgHeight = 28;
          const x = (pageWidth - imgWidth) / 2;
          doc.addImage(logoDataUrl, "PNG", x, y, imgWidth, imgHeight, undefined, "FAST");
          y += imgHeight + 4;
        } catch {
          // ignore logo failure, continue rendering
        }
      }

      // Title
      doc.setFont("helvetica", "bold");
      doc.setFontSize(18);
      const title = `Career Path: ${careerName}`;
      const titleWidth = doc.getTextWidth(title);
      doc.text(title, (pageWidth - titleWidth) / 2, y + 8);
      y += 16;

      // Section helper
      const sectionHeader = (text: string) => {
        // Divider
        doc.setDrawColor(220);
        doc.setLineWidth(0.6);
        doc.line(margin, y, pageWidth - margin, y);
        y += 6;
        doc.setTextColor(0);
        doc.setFont("helvetica", "bold");
        doc.setFontSize(13);
        doc.text(text, margin, y);
        y += 4;
        doc.setDrawColor(230);
        doc.setLineWidth(0.4);
        doc.line(margin, y, pageWidth - margin, y);
        y += 6;
      };

      const ensureSpace = (minSpace: number) => {
        if (y + minSpace > pageHeight - margin) {
          doc.addPage();
          y = margin;
        }
      };

      // Career Roadmap
      sectionHeader("Career Roadmap");
      doc.setFont("helvetica", "normal");
      doc.setFontSize(11);
      roadmap.forEach((skill, index) => {
        ensureSpace(8);
        const line = `${index + 1}. ${skill}`;
        const lines = doc.splitTextToSize(line, contentWidth);
        doc.text(lines, margin, y);
        y += lines.length * 6;
      });

      // Skill Gap Analysis (if available)
      if (missingSkills.length > 0) {
        ensureSpace(20);
        sectionHeader("Skill Gap Analysis");
        doc.setFontSize(11);
        missingSkills.forEach((skill) => {
          ensureSpace(8);
          const line = `• ${skill}`;
          const lines = doc.splitTextToSize(line, contentWidth);
          doc.text(lines, margin, y);
          y += lines.length * 6;
        });
      }

      // Resources
      if (resources.length > 0) {
        ensureSpace(20);
        sectionHeader("Resources");
        doc.setFontSize(11);
        resources.forEach((r, idx) => {
          ensureSpace(10);
          const text = `${idx + 1}. ${r.title}`;
          const lines = doc.splitTextToSize(text, contentWidth);
          doc.text(lines, margin, y);
          y += lines.length * 6;
          if (r.url) {
            const urlText = r.url;
            const urlLines = doc.splitTextToSize(urlText, contentWidth);
            doc.setTextColor(0, 0, 200);
            doc.text(urlLines, margin, y);
            doc.setTextColor(0);
            y += urlLines.length * 6;
          }
        });
      }

      // Footer branding
      const footer = "Generated by SkillMap.ai – Your AI Career Guide";
      doc.setFont("helvetica", "normal");
      doc.setFontSize(9);
      doc.setTextColor(120);
      const footerWidth = doc.getTextWidth(footer);
      doc.text(footer, (pageWidth - footerWidth) / 2, pageHeight - 8);

      // Save
      doc.save(`${careerName.replace(/\s+/g, "_")}_Roadmap.pdf`);
    } finally {
      setIsGenerating(false);
    }
  }, [careerName, roadmap, missingSkills, resources]);

  if (!careerName || !roadmap || roadmap.length === 0) return null;

  return (
    <Button onClick={generatePDF} disabled={isGenerating} className={className}>
      <Download className="w-4 h-4 mr-2" />
      {isGenerating ? "Generating..." : "Download PDF"}
    </Button>
  );
};

export default DownloadRoadmapPDF;


